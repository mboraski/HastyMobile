// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InlineLabelTextInputField component renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Array [
            Object {
              "backgroundColor": "#F4F4F4",
              "borderBottomWidth": 0.5,
              "borderColor": "#cccccc",
              "paddingHorizontal": 15,
            },
            undefined,
          ]
    }
>
    <View
        style={
            Object {
                "alignItems": "center",
                "flexDirection": "row",
              }
        }
    >
        <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
                Array [
                    Object {
                      "color": "#000",
                      "fontSize": 16,
                      "marginRight": 15,
                      "paddingVertical": 14,
                    },
                    undefined,
                    false,
                  ]
            }
        >
            label
        </Text>
        <View
            style={
                Array [
                    Object {
                      "flex": 1,
                    },
                    undefined,
                  ]
            }
        >
            <TextInput
                onChangeText={undefined}
                style={
                    Array [
                        Object {
                          "flex": 1,
                          "fontSize": 16,
                          "textAlign": "right",
                        },
                        undefined,
                        false,
                      ]
                }
            />
        </View>
    </View>
</View>,
  "nodes": Array [
    <View
      style={
            Array [
                  Object {
                    "backgroundColor": "#F4F4F4",
                    "borderBottomWidth": 0.5,
                    "borderColor": "#cccccc",
                    "paddingHorizontal": 15,
                  },
                  undefined,
                ]
      }
>
      <View
            style={
                  Object {
                        "alignItems": "center",
                        "flexDirection": "row",
                      }
            }
      >
            <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                        Array [
                              Object {
                                "color": "#000",
                                "fontSize": 16,
                                "marginRight": 15,
                                "paddingVertical": 14,
                              },
                              undefined,
                              false,
                            ]
                  }
            >
                  label
            </Text>
            <View
                  style={
                        Array [
                              Object {
                                "flex": 1,
                              },
                              undefined,
                            ]
                  }
            >
                  <TextInput
                        onChangeText={undefined}
                        style={
                              Array [
                                    Object {
                                      "flex": 1,
                                      "fontSize": 16,
                                      "textAlign": "right",
                                    },
                                    undefined,
                                    false,
                                  ]
                        }
                  />
            </View>
      </View>
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InlineLabelTextInput
        input={Object {}}
        label="label"
        meta={
                Object {
                        "error": null,
                        "invalid": false,
                        "touched": false,
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "input": Object {},
          "label": "label",
          "meta": Object {
            "error": null,
            "invalid": false,
            "touched": false,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Array [
                              Object {
                                "backgroundColor": "#F4F4F4",
                                "borderBottomWidth": 0.5,
                                "borderColor": "#cccccc",
                                "paddingHorizontal": 15,
                              },
                              undefined,
                            ]
          }
>
          <View
                    style={
                              Object {
                                        "alignItems": "center",
                                        "flexDirection": "row",
                                      }
                    }
          >
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Array [
                                                  Object {
                                                    "color": "#000",
                                                    "fontSize": 16,
                                                    "marginRight": 15,
                                                    "paddingVertical": 14,
                                                  },
                                                  undefined,
                                                  false,
                                                ]
                              }
                    >
                              label
                    </Text>
                    <View
                              style={
                                        Array [
                                                  Object {
                                                    "flex": 1,
                                                  },
                                                  undefined,
                                                ]
                              }
                    >
                              <TextInput
                                        onChangeText={undefined}
                                        style={
                                                  Array [
                                                            Object {
                                                              "flex": 1,
                                                              "fontSize": 16,
                                                              "textAlign": "right",
                                                            },
                                                            undefined,
                                                            false,
                                                          ]
                                        }
                              />
                    </View>
          </View>
</View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
                    Array [
                              Object {
                                "backgroundColor": "#F4F4F4",
                                "borderBottomWidth": 0.5,
                                "borderColor": "#cccccc",
                                "paddingHorizontal": 15,
                              },
                              undefined,
                            ]
          }
>
          <View
                    style={
                              Object {
                                        "alignItems": "center",
                                        "flexDirection": "row",
                                      }
                    }
          >
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Array [
                                                  Object {
                                                    "color": "#000",
                                                    "fontSize": 16,
                                                    "marginRight": 15,
                                                    "paddingVertical": 14,
                                                  },
                                                  undefined,
                                                  false,
                                                ]
                              }
                    >
                              label
                    </Text>
                    <View
                              style={
                                        Array [
                                                  Object {
                                                    "flex": 1,
                                                  },
                                                  undefined,
                                                ]
                              }
                    >
                              <TextInput
                                        onChangeText={undefined}
                                        style={
                                                  Array [
                                                            Object {
                                                              "flex": 1,
                                                              "fontSize": 16,
                                                              "textAlign": "right",
                                                            },
                                                            undefined,
                                                            false,
                                                          ]
                                        }
                              />
                    </View>
          </View>
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InlineLabelTextInput
    input={Object {}}
    label="label"
    meta={
        Object {
            "error": null,
            "invalid": false,
            "touched": false,
          }
    }
/>,
}
`;

exports[`InlineLabelTextInputField component renders correctly with error 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Array [
            Object {
              "backgroundColor": "#F4F4F4",
              "borderBottomWidth": 0.5,
              "borderColor": "#cccccc",
              "paddingHorizontal": 15,
            },
            undefined,
          ]
    }
>
    <View
        style={
            Object {
                "alignItems": "center",
                "flexDirection": "row",
              }
        }
    >
        <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
                Array [
                    Object {
                      "color": "#000",
                      "fontSize": 16,
                      "marginRight": 15,
                      "paddingVertical": 14,
                    },
                    undefined,
                    Object {
                      "color": "rgb(243, 108, 96)",
                    },
                  ]
            }
        >
            label
        </Text>
        <View
            style={
                Array [
                    Object {
                      "flex": 1,
                    },
                    undefined,
                  ]
            }
        >
            <TextInput
                onChangeText={undefined}
                style={
                    Array [
                        Object {
                          "flex": 1,
                          "fontSize": 16,
                          "textAlign": "right",
                        },
                        undefined,
                        Object {
                          "color": "rgb(243, 108, 96)",
                        },
                      ]
                }
            />
        </View>
    </View>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
            Object {
                "color": "rgb(243, 108, 96)",
                "fontSize": 16,
                "marginBottom": 10,
              }
        }
    >
        error
    </Text>
</View>,
  "nodes": Array [
    <View
      style={
            Array [
                  Object {
                    "backgroundColor": "#F4F4F4",
                    "borderBottomWidth": 0.5,
                    "borderColor": "#cccccc",
                    "paddingHorizontal": 15,
                  },
                  undefined,
                ]
      }
>
      <View
            style={
                  Object {
                        "alignItems": "center",
                        "flexDirection": "row",
                      }
            }
      >
            <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                        Array [
                              Object {
                                "color": "#000",
                                "fontSize": 16,
                                "marginRight": 15,
                                "paddingVertical": 14,
                              },
                              undefined,
                              Object {
                                "color": "rgb(243, 108, 96)",
                              },
                            ]
                  }
            >
                  label
            </Text>
            <View
                  style={
                        Array [
                              Object {
                                "flex": 1,
                              },
                              undefined,
                            ]
                  }
            >
                  <TextInput
                        onChangeText={undefined}
                        style={
                              Array [
                                    Object {
                                      "flex": 1,
                                      "fontSize": 16,
                                      "textAlign": "right",
                                    },
                                    undefined,
                                    Object {
                                      "color": "rgb(243, 108, 96)",
                                    },
                                  ]
                        }
                  />
            </View>
      </View>
      <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
                  Object {
                        "color": "rgb(243, 108, 96)",
                        "fontSize": 16,
                        "marginBottom": 10,
                      }
            }
      >
            error
      </Text>
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InlineLabelTextInput
        input={Object {}}
        label="label"
        meta={
                Object {
                        "error": "error",
                        "invalid": true,
                        "touched": true,
                      }
        }
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "input": Object {},
          "label": "label",
          "meta": Object {
            "error": "error",
            "invalid": true,
            "touched": true,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Array [
                              Object {
                                "backgroundColor": "#F4F4F4",
                                "borderBottomWidth": 0.5,
                                "borderColor": "#cccccc",
                                "paddingHorizontal": 15,
                              },
                              undefined,
                            ]
          }
>
          <View
                    style={
                              Object {
                                        "alignItems": "center",
                                        "flexDirection": "row",
                                      }
                    }
          >
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Array [
                                                  Object {
                                                    "color": "#000",
                                                    "fontSize": 16,
                                                    "marginRight": 15,
                                                    "paddingVertical": 14,
                                                  },
                                                  undefined,
                                                  Object {
                                                    "color": "rgb(243, 108, 96)",
                                                  },
                                                ]
                              }
                    >
                              label
                    </Text>
                    <View
                              style={
                                        Array [
                                                  Object {
                                                    "flex": 1,
                                                  },
                                                  undefined,
                                                ]
                              }
                    >
                              <TextInput
                                        onChangeText={undefined}
                                        style={
                                                  Array [
                                                            Object {
                                                              "flex": 1,
                                                              "fontSize": 16,
                                                              "textAlign": "right",
                                                            },
                                                            undefined,
                                                            Object {
                                                              "color": "rgb(243, 108, 96)",
                                                            },
                                                          ]
                                        }
                              />
                    </View>
          </View>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                              Object {
                                        "color": "rgb(243, 108, 96)",
                                        "fontSize": 16,
                                        "marginBottom": 10,
                                      }
                    }
          >
                    error
          </Text>
</View>,
        "_debugID": 6,
        "_renderedOutput": <View
          style={
                    Array [
                              Object {
                                "backgroundColor": "#F4F4F4",
                                "borderBottomWidth": 0.5,
                                "borderColor": "#cccccc",
                                "paddingHorizontal": 15,
                              },
                              undefined,
                            ]
          }
>
          <View
                    style={
                              Object {
                                        "alignItems": "center",
                                        "flexDirection": "row",
                                      }
                    }
          >
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Array [
                                                  Object {
                                                    "color": "#000",
                                                    "fontSize": 16,
                                                    "marginRight": 15,
                                                    "paddingVertical": 14,
                                                  },
                                                  undefined,
                                                  Object {
                                                    "color": "rgb(243, 108, 96)",
                                                  },
                                                ]
                              }
                    >
                              label
                    </Text>
                    <View
                              style={
                                        Array [
                                                  Object {
                                                    "flex": 1,
                                                  },
                                                  undefined,
                                                ]
                              }
                    >
                              <TextInput
                                        onChangeText={undefined}
                                        style={
                                                  Array [
                                                            Object {
                                                              "flex": 1,
                                                              "fontSize": 16,
                                                              "textAlign": "right",
                                                            },
                                                            undefined,
                                                            Object {
                                                              "color": "rgb(243, 108, 96)",
                                                            },
                                                          ]
                                        }
                              />
                    </View>
          </View>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                              Object {
                                        "color": "rgb(243, 108, 96)",
                                        "fontSize": 16,
                                        "marginBottom": 10,
                                      }
                    }
          >
                    error
          </Text>
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InlineLabelTextInput
    input={Object {}}
    label="label"
    meta={
        Object {
            "error": "error",
            "invalid": true,
            "touched": true,
          }
    }
/>,
}
`;

exports[`InlineLabelTextInputField field renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Field
    component={[Function]}
    name="Test_Input_Name"
/>,
  "nodes": Array [
    <Field
      component={[Function]}
      name="Test_Input_Name"
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InlineLabelTextInputField
        textInputName="Test_Input_Name"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "textInputName": "Test_Input_Name",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Field
          component={[Function]}
          name="Test_Input_Name"
/>,
        "_debugID": 2,
        "_renderedOutput": <Field
          component={[Function]}
          name="Test_Input_Name"
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InlineLabelTextInputField
    textInputName="Test_Input_Name"
/>,
}
`;
