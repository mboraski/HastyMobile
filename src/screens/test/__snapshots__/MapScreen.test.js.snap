// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MapScreen renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "flex": 1,
            "justifyContent": "center",
          }
    }
>
    <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
    />
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "flex": 1,
                  "justifyContent": "center",
                }
      }
>
      <ActivityIndicator
            animating={true}
            color="#999999"
            hidesWhenStopped={true}
            size="large"
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MapScreen
        address=""
        header={
                Object {
                        "isMenuOpen": false,
                      }
        }
        pending={false}
        predictions={Array []}
        region={null}
        searchVisible={false}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MapScreen {
        "_reactInternalInstance": [Circular],
        "afterSetState": [Function],
        "animate": [Function],
        "context": Object {},
        "getLocationAsync": [Function],
        "handleAddress": [Function],
        "handleAddressFocus": [Function],
        "onButtonPress": [Function],
        "onRegionChangeComplete": [Function],
        "props": Object {
          "address": "",
          "header": Object {
            "isMenuOpen": false,
          },
          "pending": false,
          "predictions": Array [],
          "region": null,
          "searchVisible": false,
        },
        "refs": Object {},
        "selectPrediction": [Function],
        "state": Object {
          "address": "",
          "mapLoaded": false,
          "opacity": 1,
          "searchRendered": false,
          "translateY": 0,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
        "_debugID": 2,
        "_renderedOutput": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MapScreen
    address=""
    header={
        Object {
            "isMenuOpen": false,
          }
    }
    pending={false}
    predictions={Array []}
    region={null}
    searchVisible={false}
/>,
}
`;

exports[`MapScreen renders correctly address 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "flex": 1,
            "justifyContent": "center",
          }
    }
>
    <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
    />
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "flex": 1,
                  "justifyContent": "center",
                }
      }
>
      <ActivityIndicator
            animating={true}
            color="#999999"
            hidesWhenStopped={true}
            size="large"
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MapScreen
        address="address"
        header={
                Object {
                        "isMenuOpen": false,
                      }
        }
        pending={false}
        predictions={Array []}
        region={null}
        searchVisible={false}
/>,
      "_debugID": 7,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MapScreen {
        "_reactInternalInstance": [Circular],
        "afterSetState": [Function],
        "animate": [Function],
        "context": Object {},
        "getLocationAsync": [Function],
        "handleAddress": [Function],
        "handleAddressFocus": [Function],
        "onButtonPress": [Function],
        "onRegionChangeComplete": [Function],
        "props": Object {
          "address": "address",
          "header": Object {
            "isMenuOpen": false,
          },
          "pending": false,
          "predictions": Array [],
          "region": null,
          "searchVisible": false,
        },
        "refs": Object {},
        "selectPrediction": [Function],
        "state": Object {
          "address": "",
          "mapLoaded": false,
          "opacity": 1,
          "searchRendered": false,
          "translateY": 0,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
        "_debugID": 8,
        "_renderedOutput": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MapScreen
    address="address"
    header={
        Object {
            "isMenuOpen": false,
          }
    }
    pending={false}
    predictions={Array []}
    region={null}
    searchVisible={false}
/>,
}
`;

exports[`MapScreen renders correctly pending 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "flex": 1,
            "justifyContent": "center",
          }
    }
>
    <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
    />
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "flex": 1,
                  "justifyContent": "center",
                }
      }
>
      <ActivityIndicator
            animating={true}
            color="#999999"
            hidesWhenStopped={true}
            size="large"
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MapScreen
        address=""
        header={
                Object {
                        "isMenuOpen": false,
                      }
        }
        pending={true}
        predictions={Array []}
        region={null}
        searchVisible={false}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MapScreen {
        "_reactInternalInstance": [Circular],
        "afterSetState": [Function],
        "animate": [Function],
        "context": Object {},
        "getLocationAsync": [Function],
        "handleAddress": [Function],
        "handleAddressFocus": [Function],
        "onButtonPress": [Function],
        "onRegionChangeComplete": [Function],
        "props": Object {
          "address": "",
          "header": Object {
            "isMenuOpen": false,
          },
          "pending": true,
          "predictions": Array [],
          "region": null,
          "searchVisible": false,
        },
        "refs": Object {},
        "selectPrediction": [Function],
        "state": Object {
          "address": "",
          "mapLoaded": false,
          "opacity": 1,
          "searchRendered": false,
          "translateY": 0,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MapScreen
    address=""
    header={
        Object {
            "isMenuOpen": false,
          }
    }
    pending={true}
    predictions={Array []}
    region={null}
    searchVisible={false}
/>,
}
`;

exports[`MapScreen renders correctly searchVisible 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "flex": 1,
            "justifyContent": "center",
          }
    }
>
    <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
    />
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "flex": 1,
                  "justifyContent": "center",
                }
      }
>
      <ActivityIndicator
            animating={true}
            color="#999999"
            hidesWhenStopped={true}
            size="large"
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MapScreen
        address=""
        header={
                Object {
                        "isMenuOpen": false,
                      }
        }
        pending={false}
        predictions={Array []}
        region={null}
        searchVisible={true}
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MapScreen {
        "_reactInternalInstance": [Circular],
        "afterSetState": [Function],
        "animate": [Function],
        "context": Object {},
        "getLocationAsync": [Function],
        "handleAddress": [Function],
        "handleAddressFocus": [Function],
        "onButtonPress": [Function],
        "onRegionChangeComplete": [Function],
        "props": Object {
          "address": "",
          "header": Object {
            "isMenuOpen": false,
          },
          "pending": false,
          "predictions": Array [],
          "region": null,
          "searchVisible": true,
        },
        "refs": Object {},
        "selectPrediction": [Function],
        "state": Object {
          "address": "",
          "mapLoaded": false,
          "opacity": 1,
          "searchRendered": false,
          "translateY": 0,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
        "_debugID": 6,
        "_renderedOutput": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MapScreen
    address=""
    header={
        Object {
            "isMenuOpen": false,
          }
    }
    pending={false}
    predictions={Array []}
    region={null}
    searchVisible={true}
/>,
}
`;
