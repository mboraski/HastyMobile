// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SignInForm should render correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ReduxForm
    actions={
        Object {
            "facebookLogin": [Function],
            "loginEmailPassword": [Function],
          }
    }
    anyTouched={false}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={true}
    submitting={false}
    token={undefined}
/>,
  "nodes": Array [
    <ReduxForm
      actions={
            Object {
                  "facebookLogin": [Function],
                  "loginEmailPassword": [Function],
                }
      }
      anyTouched={false}
      asyncValidating={false}
      fields={
            Object {
                  "email": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                  "password": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                }
      }
      handleSubmit={[Function]}
      invalid={false}
      pending={false}
      pristine={true}
      submitting={false}
      token={undefined}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <Connect(ReduxForm)
        actions={Object {}}
        anyTouched={false}
        asyncValidating={false}
        fields={
                Object {
                        "email": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                        "password": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                      }
        }
        handleSubmit={[Function]}
        invalid={false}
        pending={false}
        pristine={true}
        submitting={false}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "actions": Object {},
          "anyTouched": false,
          "asyncValidating": false,
          "fields": Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          },
          "handleSubmit": [Function],
          "invalid": false,
          "pending": false,
          "pristine": true,
          "submitting": false,
        },
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "actions": Object {
              "facebookLogin": [Function],
              "loginEmailPassword": [Function],
            },
            "anyTouched": false,
            "asyncValidating": false,
            "fields": Object {
              "email": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
              "password": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
            },
            "handleSubmit": [Function],
            "invalid": false,
            "pending": false,
            "pristine": true,
            "submitting": false,
            "token": undefined,
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 3,
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={false}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={true}
          submitting={false}
          token={undefined}
/>,
        "_debugID": 2,
        "_renderedOutput": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={false}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={true}
          submitting={false}
          token={undefined}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(ReduxForm)
    actions={Object {}}
    anyTouched={false}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={true}
    submitting={false}
/>,
}
`;

exports[`SignInForm should render correctly with error 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ReduxForm
    actions={
        Object {
            "facebookLogin": [Function],
            "loginEmailPassword": [Function],
          }
    }
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": "error",
              "touched": true,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={true}
    pending={false}
    pristine={false}
    submitting={false}
    token={undefined}
/>,
  "nodes": Array [
    <ReduxForm
      actions={
            Object {
                  "facebookLogin": [Function],
                  "loginEmailPassword": [Function],
                }
      }
      anyTouched={true}
      asyncValidating={false}
      fields={
            Object {
                  "email": Object {
                    "error": "error",
                    "touched": true,
                    "value": "",
                  },
                  "password": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                }
      }
      handleSubmit={[Function]}
      invalid={true}
      pending={false}
      pristine={false}
      submitting={false}
      token={undefined}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <Connect(ReduxForm)
        actions={Object {}}
        anyTouched={true}
        asyncValidating={false}
        fields={
                Object {
                        "email": Object {
                          "error": "error",
                          "touched": true,
                          "value": "",
                        },
                        "password": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                      }
        }
        handleSubmit={[Function]}
        invalid={true}
        pending={false}
        pristine={false}
        submitting={false}
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "actions": Object {},
          "anyTouched": true,
          "asyncValidating": false,
          "fields": Object {
            "email": Object {
              "error": "error",
              "touched": true,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          },
          "handleSubmit": [Function],
          "invalid": true,
          "pending": false,
          "pristine": false,
          "submitting": false,
        },
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "actions": Object {
              "facebookLogin": [Function],
              "loginEmailPassword": [Function],
            },
            "anyTouched": true,
            "asyncValidating": false,
            "fields": Object {
              "email": Object {
                "error": "error",
                "touched": true,
                "value": "",
              },
              "password": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
            },
            "handleSubmit": [Function],
            "invalid": true,
            "pending": false,
            "pristine": false,
            "submitting": false,
            "token": undefined,
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 3,
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": "error",
                                "touched": true,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={true}
          pending={false}
          pristine={false}
          submitting={false}
          token={undefined}
/>,
        "_debugID": 6,
        "_renderedOutput": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": "error",
                                "touched": true,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={true}
          pending={false}
          pristine={false}
          submitting={false}
          token={undefined}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(ReduxForm)
    actions={Object {}}
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": "error",
              "touched": true,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={true}
    pending={false}
    pristine={false}
    submitting={false}
/>,
}
`;

exports[`SignInForm should render correctly with submitSuccess 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ReduxForm
    actions={
        Object {
            "facebookLogin": [Function],
            "loginEmailPassword": [Function],
          }
    }
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={false}
    submitSucceeded={true}
    submitting={false}
    token={undefined}
/>,
  "nodes": Array [
    <ReduxForm
      actions={
            Object {
                  "facebookLogin": [Function],
                  "loginEmailPassword": [Function],
                }
      }
      anyTouched={true}
      asyncValidating={false}
      fields={
            Object {
                  "email": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                  "password": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                }
      }
      handleSubmit={[Function]}
      invalid={false}
      pending={false}
      pristine={false}
      submitSucceeded={true}
      submitting={false}
      token={undefined}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <Connect(ReduxForm)
        actions={Object {}}
        anyTouched={true}
        asyncValidating={false}
        fields={
                Object {
                        "email": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                        "password": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                      }
        }
        handleSubmit={[Function]}
        invalid={false}
        pending={false}
        pristine={false}
        submitSucceeded={true}
        submitting={false}
/>,
      "_debugID": 9,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "actions": Object {},
          "anyTouched": true,
          "asyncValidating": false,
          "fields": Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          },
          "handleSubmit": [Function],
          "invalid": false,
          "pending": false,
          "pristine": false,
          "submitSucceeded": true,
          "submitting": false,
        },
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "actions": Object {
              "facebookLogin": [Function],
              "loginEmailPassword": [Function],
            },
            "anyTouched": true,
            "asyncValidating": false,
            "fields": Object {
              "email": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
              "password": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
            },
            "handleSubmit": [Function],
            "invalid": false,
            "pending": false,
            "pristine": false,
            "submitSucceeded": true,
            "submitting": false,
            "token": undefined,
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 3,
      },
      "_mountOrder": 5,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={false}
          submitSucceeded={true}
          submitting={false}
          token={undefined}
/>,
        "_debugID": 10,
        "_renderedOutput": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={false}
          submitSucceeded={true}
          submitting={false}
          token={undefined}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(ReduxForm)
    actions={Object {}}
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={false}
    submitSucceeded={true}
    submitting={false}
/>,
}
`;

exports[`SignInForm should render correctly with submitting 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ReduxForm
    actions={
        Object {
            "facebookLogin": [Function],
            "loginEmailPassword": [Function],
          }
    }
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={false}
    submitting={true}
    token={undefined}
/>,
  "nodes": Array [
    <ReduxForm
      actions={
            Object {
                  "facebookLogin": [Function],
                  "loginEmailPassword": [Function],
                }
      }
      anyTouched={true}
      asyncValidating={false}
      fields={
            Object {
                  "email": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                  "password": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                }
      }
      handleSubmit={[Function]}
      invalid={false}
      pending={false}
      pristine={false}
      submitting={true}
      token={undefined}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <Connect(ReduxForm)
        actions={Object {}}
        anyTouched={true}
        asyncValidating={false}
        fields={
                Object {
                        "email": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                        "password": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                      }
        }
        handleSubmit={[Function]}
        invalid={false}
        pending={false}
        pristine={false}
        submitting={true}
/>,
      "_debugID": 7,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "actions": Object {},
          "anyTouched": true,
          "asyncValidating": false,
          "fields": Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          },
          "handleSubmit": [Function],
          "invalid": false,
          "pending": false,
          "pristine": false,
          "submitting": true,
        },
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "actions": Object {
              "facebookLogin": [Function],
              "loginEmailPassword": [Function],
            },
            "anyTouched": true,
            "asyncValidating": false,
            "fields": Object {
              "email": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
              "password": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
            },
            "handleSubmit": [Function],
            "invalid": false,
            "pending": false,
            "pristine": false,
            "submitting": true,
            "token": undefined,
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 3,
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={false}
          submitting={true}
          token={undefined}
/>,
        "_debugID": 8,
        "_renderedOutput": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={true}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={false}
          pending={false}
          pristine={false}
          submitting={true}
          token={undefined}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(ReduxForm)
    actions={Object {}}
    anyTouched={true}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={false}
    pending={false}
    pristine={false}
    submitting={true}
/>,
}
`;

exports[`SignInForm should render correctly with untouched disabled 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <ReduxForm
    actions={
        Object {
            "facebookLogin": [Function],
            "loginEmailPassword": [Function],
          }
    }
    anyTouched={false}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={true}
    pending={false}
    pristine={false}
    submitting={false}
    token={undefined}
/>,
  "nodes": Array [
    <ReduxForm
      actions={
            Object {
                  "facebookLogin": [Function],
                  "loginEmailPassword": [Function],
                }
      }
      anyTouched={false}
      asyncValidating={false}
      fields={
            Object {
                  "email": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                  "password": Object {
                    "error": null,
                    "touched": false,
                    "value": "",
                  },
                }
      }
      handleSubmit={[Function]}
      invalid={true}
      pending={false}
      pristine={false}
      submitting={false}
      token={undefined}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <Connect(ReduxForm)
        actions={Object {}}
        anyTouched={false}
        asyncValidating={false}
        fields={
                Object {
                        "email": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                        "password": Object {
                          "error": null,
                          "touched": false,
                          "value": "",
                        },
                      }
        }
        handleSubmit={[Function]}
        invalid={true}
        pending={false}
        pristine={false}
        submitting={false}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "actions": Object {},
          "anyTouched": false,
          "asyncValidating": false,
          "fields": Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          },
          "handleSubmit": [Function],
          "invalid": true,
          "pending": false,
          "pristine": false,
          "submitting": false,
        },
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "actions": Object {
              "facebookLogin": [Function],
              "loginEmailPassword": [Function],
            },
            "anyTouched": false,
            "asyncValidating": false,
            "fields": Object {
              "email": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
              "password": Object {
                "error": null,
                "touched": false,
                "value": "",
              },
            },
            "handleSubmit": [Function],
            "invalid": true,
            "pending": false,
            "pristine": false,
            "submitting": false,
            "token": undefined,
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 3,
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={false}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={true}
          pending={false}
          pristine={false}
          submitting={false}
          token={undefined}
/>,
        "_debugID": 4,
        "_renderedOutput": <ReduxForm
          actions={
                    Object {
                              "facebookLogin": [Function],
                              "loginEmailPassword": [Function],
                            }
          }
          anyTouched={false}
          asyncValidating={false}
          fields={
                    Object {
                              "email": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                              "password": Object {
                                "error": null,
                                "touched": false,
                                "value": "",
                              },
                            }
          }
          handleSubmit={[Function]}
          invalid={true}
          pending={false}
          pristine={false}
          submitting={false}
          token={undefined}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(ReduxForm)
    actions={Object {}}
    anyTouched={false}
    asyncValidating={false}
    fields={
        Object {
            "email": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
            "password": Object {
              "error": null,
              "touched": false,
              "value": "",
            },
          }
    }
    handleSubmit={[Function]}
    invalid={true}
    pending={false}
    pristine={false}
    submitting={false}
/>,
}
`;
