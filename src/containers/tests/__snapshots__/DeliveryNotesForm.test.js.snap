// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeliveryNotesForm renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Connect(Form(DeliveryNotesForm))
    anyTouched={false}
    asyncValidating={false}
    destroyOnUnmount={true}
    enableReinitialize={false}
    fields={
        Object {
            "notes": Object {
              "error": null,
              "touched": false,
              "value": "notes",
            },
          }
    }
    forceUnregisterOnUnmount={false}
    form="DeliveryNotes"
    getFormState={[Function]}
    initialValues={
        Object {
            "notes": "notes",
          }
    }
    invalid={false}
    keepDirtyOnReinitialize={false}
    onSubmit={[Function]}
    pending={false}
    persistentSubmitErrors={false}
    pristine={true}
    pure={true}
    setDeliveryNotes={[Function]}
    shouldAsyncValidate={[Function]}
    shouldValidate={[Function]}
    submitting={false}
    touchOnBlur={true}
    touchOnChange={false}
/>,
  "nodes": Array [
    <Connect(Form(DeliveryNotesForm))
      anyTouched={false}
      asyncValidating={false}
      destroyOnUnmount={true}
      enableReinitialize={false}
      fields={
            Object {
                  "notes": Object {
                    "error": null,
                    "touched": false,
                    "value": "notes",
                  },
                }
      }
      forceUnregisterOnUnmount={false}
      form="DeliveryNotes"
      getFormState={[Function]}
      initialValues={
            Object {
                  "notes": "notes",
                }
      }
      invalid={false}
      keepDirtyOnReinitialize={false}
      onSubmit={[Function]}
      pending={false}
      persistentSubmitErrors={false}
      pristine={true}
      pure={true}
      setDeliveryNotes={[Function]}
      shouldAsyncValidate={[Function]}
      shouldValidate={[Function]}
      submitting={false}
      touchOnBlur={true}
      touchOnChange={false}
/>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <ReduxForm
        anyTouched={false}
        asyncValidating={false}
        fields={
                Object {
                        "notes": Object {
                          "error": null,
                          "touched": false,
                          "value": "notes",
                        },
                      }
        }
        initialValues={
                Object {
                        "notes": "notes",
                      }
        }
        invalid={false}
        pending={false}
        pristine={true}
        setDeliveryNotes={[Function]}
        submitting={false}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ReduxForm {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "anyTouched": false,
          "asyncValidating": false,
          "fields": Object {
            "notes": Object {
              "error": null,
              "touched": false,
              "value": "notes",
            },
          },
          "initialValues": Object {
            "notes": "notes",
          },
          "invalid": false,
          "pending": false,
          "pristine": true,
          "setDeliveryNotes": [Function],
          "submitting": false,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Connect(Form(DeliveryNotesForm))
          anyTouched={false}
          asyncValidating={false}
          destroyOnUnmount={true}
          enableReinitialize={false}
          fields={
                    Object {
                              "notes": Object {
                                "error": null,
                                "touched": false,
                                "value": "notes",
                              },
                            }
          }
          forceUnregisterOnUnmount={false}
          form="DeliveryNotes"
          getFormState={[Function]}
          initialValues={
                    Object {
                              "notes": "notes",
                            }
          }
          invalid={false}
          keepDirtyOnReinitialize={false}
          onSubmit={[Function]}
          pending={false}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          setDeliveryNotes={[Function]}
          shouldAsyncValidate={[Function]}
          shouldValidate={[Function]}
          submitting={false}
          touchOnBlur={true}
          touchOnChange={false}
/>,
        "_debugID": 4,
        "_renderedOutput": <Connect(Form(DeliveryNotesForm))
          anyTouched={false}
          asyncValidating={false}
          destroyOnUnmount={true}
          enableReinitialize={false}
          fields={
                    Object {
                              "notes": Object {
                                "error": null,
                                "touched": false,
                                "value": "notes",
                              },
                            }
          }
          forceUnregisterOnUnmount={false}
          form="DeliveryNotes"
          getFormState={[Function]}
          initialValues={
                    Object {
                              "notes": "notes",
                            }
          }
          invalid={false}
          keepDirtyOnReinitialize={false}
          onSubmit={[Function]}
          pending={false}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          setDeliveryNotes={[Function]}
          shouldAsyncValidate={[Function]}
          shouldValidate={[Function]}
          submitting={false}
          touchOnBlur={true}
          touchOnChange={false}
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ReduxForm
    anyTouched={false}
    asyncValidating={false}
    fields={
        Object {
            "notes": Object {
              "error": null,
              "touched": false,
              "value": "notes",
            },
          }
    }
    initialValues={
        Object {
            "notes": "notes",
          }
    }
    invalid={false}
    pending={false}
    pristine={true}
    setDeliveryNotes={[Function]}
    submitting={false}
/>,
}
`;
