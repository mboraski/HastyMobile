// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MapScreen renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "flex": 1,
            "justifyContent": "center",
          }
    }
>
    <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
    />
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "flex": 1,
                  "justifyContent": "center",
                }
      }
>
      <ActivityIndicator
            animating={true}
            color="#999999"
            hidesWhenStopped={true}
            size="large"
      />
</View>,
  ],
  "options": Object {
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "_currentElement": <MapScreen
        dispatch={[Function]}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": MapScreen {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleAddress": [Function],
        "onButtonPress": [Function],
        "onRegionChangeComplete": [Function],
        "props": Object {
          "dispatch": [Function],
        },
        "refs": Object {},
        "state": Object {
          "address": "",
          "mapLoaded": false,
          "region": Object {
            "latitude": 30.26,
            "latitudeDelta": 0.25,
            "longitude": -97.76,
            "longitudeDelta": 0.1,
          },
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
                    Object {
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }
>
          <ActivityIndicator
                    animating={true}
                    color="#999999"
                    hidesWhenStopped={true}
                    size="large"
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <MapScreen
    dispatch={[Function]}
/>,
}
`;
